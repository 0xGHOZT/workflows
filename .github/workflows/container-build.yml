# GitHub reusable workflow for building and testing a local Dockerfile to Google
# Container Registry or Google Artifact Registry.

on:
  workflow_call:
    inputs:
      artifacts-name:
        default: build-artifacts
        description: Artifacts name
        type: string
      artifacts-path:
        description: Artifacts path (relative to working directory)
        required: false
        type: string
      create-release:
        default: false
        description: Specifies if pushing release to registry
        type: boolean
      image-name:
        default: ${{ github.repository }}
        description: Docker image base name (excluding the GCP project ID and registry)
        type: string
      image-tag-suffix:
        description: Docker image tag suffix
        required: false
        type: string
      registry:
        description: Registry path (required if `create-release` is `true`, i.e. `gcr.io` for GCR or `<location>-docker.pkg.dev` for GAR)
        required: false
        type: string
      service-account:
        description: GCP service account to impersonate by the current Workload Identity
        required: false
        type: string
      skip-tests:
        default: false
        description: Specifies if tests should run
        type: boolean
      test-command:
        default: docker-compose -f docker-compose.test.yml up --abort-on-container-exit
        description: Command for running tests
        type: string
      test-report-path:
        description: Path to the test report
        required: false
        type: string
      test-reporter:
        description: Test reporter type
        required: false
        type: string
      workload-identity-provider:
        description: Workload Identity Provider name, i.e. `projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider`
        required: false
        type: string
    outputs:
      artifacts-name:
        description: Name of the uploaded artifacts
        value: ${{ jobs.build.outputs.artifacts-name }}
      artifacts-path:
        description: Path of the uploaded artifacts (relative to working directory)
        value: ${{ jobs.build.outputs.artifacts-path }}
      build-number:
        description: Build number of this app
        value: ${{ jobs.build.outputs.build-number }}
      build-version:
        description: Build version of this app
        value: ${{ jobs.build.outputs.build-version }}
      image:
        description: The built Docker image
        value: ${{ jobs.build.outputs.image }}
    secrets:
      gh-access-token:
        description: GitHub access token for checking out private repos
        required: true
jobs:
  build:
    name: Container
    runs-on: ubuntu-latest
    permissions:
      checks: write
      id-token: write
    outputs:
      artifacts-name: ${{ inputs.artifacts-path && inputs.artifacts-name || '' }}
      artifacts-path: ${{ inputs.artifacts-path }}
      build-number: ${{ steps.env.outputs.build_number }}
      build-version: ${{ steps.env.outputs.build_version }}
      image: ${{ inputs.create-release && fromJSON(steps.metadata.outputs.json).tags[0] || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.gh-access-token }}
      - name: Set up environment
        id: env
        run: |-
          echo "build_version=$(grep '"version"' ./package.json | cut -d '"' -f 4 | head -n 1)" >> $GITHUB_OUTPUT
          echo "build_number=$(echo ${GITHUB_SHA:-$(git rev-parse HEAD)} | head -c7)" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Authenticate Google Cloud
        id: auth
        if: ${{ inputs.workload-identity-provider && inputs.service-account }}
        uses: google-github-actions/auth@v1
        with:
          service_account: ${{ inputs.service-account }}
          token_format: access_token
          workload_identity_provider: ${{ inputs.workload-identity-provider }}
      - name: Authenticate Docker registry
        if: ${{ inputs.registry }}
        uses: docker/login-action@v2
        with:
          password: ${{ steps.auth.outputs.access_token }}
          registry: ${{ inputs.registry }}
          username: oauth2accesstoken
      - name: Build test target
        id: build-test
        if: ${{ !inputs.skip-tests }}
        uses: docker/build-push-action@v4
        with:
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          context: .
          load: true
          secrets: GH_ACCESS_TOKEN=${{ secrets.gh-access-token }}
          tags: ${{ inputs.image-name }}:test
          target: test
      - name: Run tests
        if: ${{ !inputs.skip-tests }}
        run: IMAGE=${{ fromJSON(steps.build-test.outputs.metadata)['image.name'] }} ${{ inputs.test-command }}
      - name: Build prod target
        id: build-prod
        uses: docker/build-push-action@v4
        with:
          build-args: BUILD_NUMBER=${{ steps.env.outputs.build_number }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          context: .
          load: true
          secrets: GH_ACCESS_TOKEN=${{ secrets.gh-access-token }}
          tags: ${{ inputs.image-name }}:prod
          target: prod
      - name: Set up release metadata
        if: ${{ inputs.create-release }}
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{ inputs.registry && format('{0}/', inputs.registry) || '' }}${{ steps.auth.outputs.project_id }}/${{ inputs.image-name }}
          tags: |
            type=ref,event=pr,suffix=${{ inputs.image-tag-suffix }}
            type=semver,pattern={{version}},suffix=${{ inputs.image-tag-suffix }}
            type=sha,prefix=,format=short,priority=1000,suffix=${{ inputs.image-tag-suffix }}
            type=raw,value=${{ steps.env.outputs.build_version }},suffix=${{ inputs.image-tag-suffix }}
            type=raw,value=latest,suffix=${{ inputs.image-tag-suffix }}
      - name: Push image release to registry
        uses: docker/build-push-action@v4
        if: ${{ inputs.create-release }}
        with:
          build-args: BUILD_NUMBER=${{ steps.env.outputs.build_number }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          context: .
          labels: ${{ steps.metadata.outputs.labels }}
          push: true
          secrets: GH_ACCESS_TOKEN=${{ secrets.gh-access-token }}
          tags: ${{ steps.metadata.outputs.tags }}
      - name: Copy artifacts
        if: ${{ inputs.artifacts-path }}
        env:
          IMAGE: ${{ fromJSON(steps.build-prod.outputs.metadata)['image.name'] }}
        run: |-
          from_path="/var/app/${{ inputs.artifacts-path }}"
          to_path="${PWD}/${{ inputs.artifacts-path }}"
          process_name="tmp"

          echo "Copying files from ${IMAGE}... from=${from_path}, to=${to_path}"

          docker run -td --rm --name $process_name $IMAGE
          docker cp $process_name:$from_path $to_path
          docker stop $process_name

          echo "Copying files from ${IMAGE}... OK"
      - name: Store artifacts
        if: ${{ inputs.artifacts-path }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifacts-name }}
          path: ${{ inputs.artifacts-path }}
      - name: Generate test report
        if: ${{ inputs.test-reporter && !inputs.skip-tests }}
        uses: dorny/test-reporter@v1
        with:
          name: Test Report
          path: ${{ inputs.test-report-path }}
          reporter: ${{ inputs.test-reporter }}
      - name: Append summary
        if: ${{ inputs.create-release }}
        run: |-
          echo "Pushed image \`${{ fromJSON(steps.metadata.outputs.json).tags[0] }}\` to registry \`${{ inputs.registry }}\`." >> $GITHUB_STEP_SUMMARY
