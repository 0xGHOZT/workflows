# GitHub reusable workflow for building and testing a local Dockerfile to Google
# Container Registry or Google Artifact Registry.

on:
  workflow_call:
    inputs:
      project-id:
        description: ID of the GCP project where the container should be pushed to (required if `create-release`` is `true`)
        required: false
        type: string
      environment:
        default: development
        description: Build and deploy environment (i.e. for GitHub deployment, Sentry release, etc.)
        type: string
      registry:
        description: Registry path (required if `create-release` is `true`, i.e. `gcr.io` for GCR or `<location>-docker.pkg.dev` for GAR)
        required: false
        type: string
      workload-identity-provider:
        description: Workload Identity Provider name, i.e. `projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider`
        required: false
        type: string
      service-account:
        description: GCP service account to impersonate by the current Workload Identity
        required: false
        type: string
      image-name:
        default: ${{ github.repository }}
        description: Docker image base name (excluding the GCP project ID and registry)
        type: string
      image-tag-suffix:
        description: Docker image tag suffix
        required: false
        type: string
      sentry-org:
        description: Sentry organization slug
        required: false
        type: string
      sentry-project:
        description: Sentry project slug
        required: false
        type: string
      create-release:
        default: false
        description: Specifies if pushing release to registry
        type: boolean
      skip-tests:
        default: false
        description: Specifies if tests should run
        type: boolean
    outputs:
      image:
        description: The built Docker image
        value: ${{ jobs.build.outputs.image }}
    secrets:
      gh-access-token:
        description: GitHub access token for checking out private repos
        required: true
      sentry-auth-token:
        description: Sentry authentication token (if creating a release in Sentry)
        required: false
jobs:
  build:
    name: Container
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    env:
      IMAGE_NAME: ${{ inputs.registry && format('{0}/', inputs.registry) || '' }}${{ inputs.project-id && format('{0}/', inputs.project-id) || '' }}${{ inputs.image-name }}
    outputs:
      image: ${{ inputs.create-release && fromJSON(steps.metadata.outputs.json).tags[0] || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.gh-access-token }}
      - name: Set up environment
        id: env
        run: |-
          echo "build_number=$(echo ${GITHUB_SHA:-$(git rev-parse HEAD)} | head -c7)" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Authenticate Google Cloud
        id: auth
        if: ${{ inputs.workload-identity-provider && inputs.service-account }}
        uses: google-github-actions/auth@v1
        with:
          token_format: access_token
          workload_identity_provider: ${{ inputs.workload-identity-provider }}
          service_account: ${{ inputs.service-account }}
      - name: Authenticate Docker registry
        if: ${{ inputs.registry }}
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.registry }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Build test target
        id: build-test
        if: ${{ !inputs.skip-tests }}
        uses: docker/build-push-action@v4
        with:
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          context: .
          load: true
          secrets: GH_ACCESS_TOKEN=${{ secrets.gh-access-token }}
          tags: ${{ env.IMAGE_NAME }}:test
          target: test
      - name: Run tests
        if: ${{ !inputs.skip-tests }}
        run: make run target=test image=${{ fromJSON(steps.build-test.outputs.metadata)['image.name'] }}
      - name: Foo
        run: ls -la
      - name: Generate test report
        if: ${{ !inputs.skip-tests }}
        uses: dorny/test-reporter@v1
        with:
          name: Tests
          path: .tmp/test-results.json
          reporter: mocha-json
      - name: Build prod target
        id: build-prod
        uses: docker/build-push-action@v4
        with:
          build-args: BUILD_NUMBER=${{ steps.env.outputs.build_number }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          context: .
          load: true
          secrets: GH_ACCESS_TOKEN=${{ secrets.gh-access-token }}
          tags: ${{ env.IMAGE_NAME }}:prod
          target: prod
      - name: Set up release metadata
        if: ${{ inputs.create-release }}
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr,suffix=${{ inputs.image-tag-suffix }}
            type=semver,pattern={{version}},suffix=${{ inputs.image-tag-suffix }}
            type=sha,prefix=,format=short,priority=1000,suffix=${{ inputs.image-tag-suffix }}
            type=raw,value=latest,suffix=${{ inputs.image-tag-suffix }}
      - name: Push image release to registry
        uses: docker/build-push-action@v4
        if: ${{ inputs.create-release }}
        with:
          build-args: BUILD_NUMBER=${{ steps.env.outputs.build_number }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          context: .
          labels: ${{ steps.metadata.outputs.labels }}
          push: true
          secrets: GH_ACCESS_TOKEN=${{ secrets.gh-access-token }}
          tags: ${{ steps.metadata.outputs.tags }}
          target: release
      - name: Copy artifacts
        if: ${{ inputs.create-release && inputs.sentry-project }}
        env:
          IMAGE: ${{ fromJSON(steps.build-prod.outputs.metadata)['image.name'] }}
        run: |-
          from_path="/var/app/build/"
          to_path="${PWD}/build"
          process_name="tmp"

          echo "Copying files from ${IMAGE}... from=${from_path}, to=${to_path}"

          docker run -td --rm --name $process_name $IMAGE
          docker cp $process_name:$from_path $to_path
          docker stop $process_name

          echo "Copying files from ${IMAGE}... OK"
      - name: Create Sentry release
        if: ${{ inputs.create-release && inputs.sentry-project }}
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.sentry-auth-token }}
          SENTRY_ORG: ${{ inputs.sentry-org }}
          SENTRY_PROJECT: ${{ inputs.sentry-project }}
        with:
          environment: ${{ inputs.environment }}
          set_commits: skip
          sourcemaps: ./build
          version: ${{ steps.env.outputs.build_number }}
      - name: Append summary
        if: ${{ inputs.create-release }}
        run: |-
          echo "Successfully pushed image ${{ fromJSON(steps.metadata.outputs.json).tags[0] }} to Docker registry ${{ inputs.registry }}" >> $GITHUB_STEP_SUMMARY
      - name: Foo
        run: ls -la