# GitHub reusable workflow for deploying a container from Google Container
# Registry or Google Artifact Registry to Google Kubernetes Engine.

on:
  workflow_call:
    inputs:
      cluster-labels:
        description: Comma-delimited labels to match when searching for clusters to deploy to (i.e. "service=foo,environment=bar")
        required: false
        type: string
      cluster-region-zone:
        description: Specific region zone of the GKE cluster(s) to deploy to
        required: false
        type: string
      environment:
        description: GitHub deploy environment
        required: false
        type: string
      k8s-container:
        description: Kubernetes container name
        required: true
        type: string
      k8s-deployment:
        description: Kubernetes deployment to update at the end of the deployment
        required: true
        type: string
      k8s-namespace:
        default: default
        description: Kubernetes namespace in the GKE cluster to deploy to
        type: string
      image:
        description: Docker image to deploy
        required: true
        type: string
      service-account:
        description: GCP service account to impersonate by the current Workload Identity
        required: true
        type: string
      workload-identity-provider:
        description: Workload Identity Provider name, i.e. `projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider`
        required: true
        type: string
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment: ${{ inputs.environment }}
    steps:
      - name: Authenticate Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          service_account: ${{ inputs.service-account }}
          token_format: access_token
          workload_identity_provider: ${{ inputs.workload-identity-provider }}
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: gke-gcloud-auth-plugin
          project_id: ${{ steps.auth.outputs.project_id }}
      - name: Update clusters
        env:
          IMAGE: ${{ inputs.image }}
          K8S_CONTAINER: ${{ inputs.k8s-container }}
          K8S_DEPLOYMENT: ${{ inputs.k8s-deployment }}
          K8S_NAMESPACE: ${{ inputs.k8s-namespace }}
          LABELS: ${{ inputs.cluster-labels }}
          REGION_ZONE: ${{ inputs.cluster-region-zone }}
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: |-
          labels=($(echo $LABELS | sed "s/,/ /g"))
          filter=$(printf " AND nodeConfig.labels.%s" "${labels[@]}")
          clusters=$(gcloud container clusters list \
            --zone="${REGION_ZONE}" \
            --filter="${filter:5}" \
            | awk 'NR >= 2 {print $1 "\/" $2}' \
            | sed -n -e 'H;${x;s/\n/,/g;s/^,//;p;}')

          if [ ! -z $clusters ]; then
            echo "Deployed Kubernetes cluster(s):" >> $GITHUB_STEP_SUMMARY

            for cluster in $(echo $clusters | sed "s/,/ /g")
            do
              if [ ! -z $cluster ]; then
                IFS=/ read name region_zone <<< $cluster
                gcloud container clusters get-credentials $name --zone=$region_zone --quiet
                kubectl set image deployment/$K8S_DEPLOYMENT $K8S_CONTAINER=$IMAGE --namespace=$K8S_NAMESPACE

                echo "- Updated \`${K8S_CONTAINER}\` to \`${IMAGE}\` in \`deployment/${K8S_DEPLOYMENT}\` for cluster \`${name}\` in region zone \`${region_zone}\`" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "No Kubernetes cluster(s) found, deployment skipped." >> $GITHUB_STEP_SUMMARY
          fi
